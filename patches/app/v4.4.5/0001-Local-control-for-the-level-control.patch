From a6e46e5a61412a97f97c1334abdad05d096b77fa Mon Sep 17 00:00:00 2001
From: Alexei Chetroi <Alexei.Chetroi@outlook.com>
Date: Sun, 19 Jan 2025 20:24:24 -0500
Subject: [PATCH] Local control for the level-control

---
 .../plugin/level-control/level-control.c      | 62 ++++++++++++++-----
 1 file changed, 46 insertions(+), 16 deletions(-)

diff --git a/protocol/zigbee/app/framework/plugin/level-control/level-control.c b/protocol/zigbee/app/framework/plugin/level-control/level-control.c
index 9cef92991..90e0860d5 100644
--- a/protocol/zigbee/app/framework/plugin/level-control/level-control.c
+++ b/protocol/zigbee/app/framework/plugin/level-control/level-control.c
@@ -47,6 +47,8 @@
 #endif
 #endif
 
+#include "app.h"
+
 #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_START_UP_CURRENT_LEVEL_ATTRIBUTE
 static bool areStartUpLevelControlServerAttributesTokenized(uint8_t endpoint);
 #endif
@@ -72,13 +74,16 @@ typedef struct {
   uint32_t eventDurationMs;
   uint32_t transitionTimeMs;
   uint32_t elapsedTimeMs;
+  uint32_t eventScheduledTimeMs;
+  uint32_t eventStartTimeMs;
 } EmberAfLevelControlState;
 
 static EmberAfLevelControlState stateTable[EMBER_AF_LEVEL_CONTROL_CLUSTER_SERVER_ENDPOINT_COUNT];
 
 static EmberAfLevelControlState *getState(uint8_t endpoint);
 
-static void moveToLevelHandler(uint8_t commandId,
+static void moveToLevelHandler(uint8_t endpoint,
+                               uint8_t commandId,
                                uint8_t level,
                                uint16_t transitionTimeDs,
                                uint8_t optionMask,
@@ -167,6 +172,8 @@ void emberAfLevelControlClusterServerTickCallback(uint8_t endpoint)
     return;
   }
 
+  if ( state->eventStartTimeMs == 0 ) state->eventStartTimeMs = TIMESTAMP_MS;
+
   state->elapsedTimeMs += state->eventDurationMs;
 
 #if !defined(ZCL_USING_LEVEL_CONTROL_CLUSTER_OPTIONS_ATTRIBUTE) \
@@ -189,7 +196,7 @@ void emberAfLevelControlClusterServerTickCallback(uint8_t endpoint)
     return;
   }
 
-  emberAfLevelControlClusterPrint("Event: move from %d", currentLevel);
+  //emberAfLevelControlClusterPrint("Event: move from %d", currentLevel);
 
   // adjust by the proper amount, either up or down
   if (state->transitionTimeMs == 0) {
@@ -205,9 +212,9 @@ void emberAfLevelControlClusterServerTickCallback(uint8_t endpoint)
     currentLevel--;
   }
 
-  emberAfLevelControlClusterPrint(" to %d ", currentLevel);
-  emberAfLevelControlClusterPrintln("(diff %c1)",
-                                    state->increasing ? '+' : '-');
+  //emberAfLevelControlClusterPrint(" to %d ", currentLevel);
+  //emberAfLevelControlClusterPrintln("(diff %c1)",
+  //                                  state->increasing ? '+' : '-');
 
   status = emberAfWriteServerAttribute(endpoint,
                                        ZCL_LEVEL_CONTROL_CLUSTER_ID,
@@ -229,6 +236,10 @@ void emberAfLevelControlClusterServerTickCallback(uint8_t endpoint)
 
   // Are we at the requested level?
   if (currentLevel == state->moveToLevel) {
+    uint32_t delta = TIMESTAMP_MS - state->eventStartTimeMs;
+    emberAfLevelControlClusterPrintln("Event: move completed in %d ms, 1st event schedule lag: %d, scheduled transition time: %d",
+        delta, state->eventScheduledTimeMs - state->eventStartTimeMs, state->transitionTimeMs);
+    writeRemainingTime(endpoint, 0);
     if (state->commandId == ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID
         || state->commandId == ZCL_MOVE_WITH_ON_OFF_COMMAND_ID
         || state->commandId == ZCL_STEP_WITH_ON_OFF_COMMAND_ID) {
@@ -262,7 +273,9 @@ void emberAfLevelControlClusterServerTickCallback(uint8_t endpoint)
         }
       }
     }
-    writeRemainingTime(endpoint, 0);
+    delta = TIMESTAMP_MS - state->eventStartTimeMs;
+    emberAfLevelControlClusterPrintln("Event: move completed in %d ms, 1st event schedule lag: %d, scheduled transition time: %d",
+        delta, state->eventScheduledTimeMs - state->eventStartTimeMs, state->transitionTimeMs);
   } else {
     writeRemainingTime(endpoint,
                        state->transitionTimeMs - state->elapsedTimeMs);
@@ -416,7 +429,8 @@ bool emberAfLevelControlClusterMoveToLevelCallback(EmberAfClusterCommand *cmd)
                                     cmd_data.transitionTime,
                                     cmd_data.optionMask,
                                     cmd_data.optionOverride);
-  moveToLevelHandler(ZCL_MOVE_TO_LEVEL_COMMAND_ID,
+  moveToLevelHandler(emberAfCurrentEndpoint(),
+                     ZCL_MOVE_TO_LEVEL_COMMAND_ID,
                      cmd_data.level,
                      cmd_data.transitionTime,
                      cmd_data.optionMask,
@@ -438,7 +452,8 @@ bool emberAfLevelControlClusterMoveToLevelWithOnOffCallback(EmberAfClusterComman
                                     "RX level-control:",
                                     cmd_data.level,
                                     cmd_data.transitionTime);
-  moveToLevelHandler(ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID,
+  moveToLevelHandler(emberAfCurrentEndpoint(),
+                     ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID,
                      cmd_data.level,
                      cmd_data.transitionTime,
                      0xFF,
@@ -543,14 +558,14 @@ bool emberAfLevelControlClusterStopWithOnOffCallback(void)
   return true;
 }
 
-static void moveToLevelHandler(uint8_t commandId,
+static void moveToLevelHandler(uint8_t endpoint,
+                               uint8_t commandId,
                                uint8_t level,
                                uint16_t transitionTimeDs,
                                uint8_t optionMask,
                                uint8_t optionOverride,
                                uint16_t storedLevel)
 {
-  uint8_t endpoint = emberAfCurrentEndpoint();
   EmberAfLevelControlState *state = getState(endpoint);
   EmberAfStatus status;
   uint8_t currentLevel;
@@ -566,6 +581,9 @@ static void moveToLevelHandler(uint8_t commandId,
     goto send_default_response;
   }
 
+  state->eventStartTimeMs = 0;
+  state->eventScheduledTimeMs = TIMESTAMP_MS;
+
   // Cancel any currently active command before fiddling with the state.
   deactivate(endpoint);
 
@@ -661,6 +679,10 @@ static void moveToLevelHandler(uint8_t commandId,
 
   // The setup was successful, so mark the new state as active and return.
   schedule(endpoint, state->eventDurationMs);
+  emberAfLevelControlClusterPrintln("Lvl Ctl: Move to %d over %d ds, event duration %d ms",
+                                    state->moveToLevel,
+                                    transitionTimeDs,
+                                    state->eventDurationMs);
   status = EMBER_ZCL_STATUS_SUCCESS;
 
 #ifdef SL_CATALOG_ZIGBEE_ZLL_LEVEL_CONTROL_SERVER_PRESENT
@@ -967,15 +989,21 @@ void emberAfOnOffClusterLevelControlEffectCallback(uint8_t endpoint,
   resolvedLevel = temporaryCurrentLevelCache;
 #endif
 
-  // Read the OnOffTransitionTime attribute.
-#ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_OFF_TRANSITION_TIME_ATTRIBUTE
+// Read the OnTransitionTime or offTransitionTime attribute.
+#if defined(ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_TRANSITION_TIME_ATTRIBUTE) || defined(ZCL_USING_LEVEL_CONTROL_CLUSTER_OFF_TRANSITION_TIME_ATTRIBUTE)
+  // If either of these attributes are used, we need to read the OnOffTransitionTime.
+  uint16_t attrId = (newValue
+                     ? ZCL_ON_TRANSITION_TIME_ATTRIBUTE_ID
+                     : ZCL_OFF_TRANSITION_TIME_ATTRIBUTE_ID);
   status = emberAfReadServerAttribute(endpoint,
                                       ZCL_LEVEL_CONTROL_CLUSTER_ID,
-                                      ZCL_ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID,
+                                      attrId,
                                       (uint8_t *)&currentOnOffTransitionTime,
                                       sizeof(currentOnOffTransitionTime));
   if (status != EMBER_ZCL_STATUS_SUCCESS) {
-    emberAfLevelControlClusterPrintln("ERR: reading current level %x", status);
+    emberAfLevelControlClusterPrintln("ERR: Couldn't read %d attribute of the LevelControl cluster %x",
+                                      attrId,
+                                      status);
     return;
   }
 #else
@@ -997,7 +1025,8 @@ void emberAfOnOffClusterLevelControlEffectCallback(uint8_t endpoint,
 
     // "Move CurrentLevel to OnLevel, or to the stored level if OnLevel is not
     // defined, over the time period OnOffTransitionTime."
-    moveToLevelHandler(ZCL_MOVE_TO_LEVEL_COMMAND_ID,
+    moveToLevelHandler(endpoint,
+                       ZCL_MOVE_TO_LEVEL_COMMAND_ID,
                        resolvedLevel,
                        currentOnOffTransitionTime,
                        0xFF,
@@ -1007,7 +1036,8 @@ void emberAfOnOffClusterLevelControlEffectCallback(uint8_t endpoint,
     // ...else if newValue is ZCL_OFF_COMMAND_ID...
     // "Move CurrentLevel to the minimum level allowed for the device over the
     // time period OnOffTransitionTime."
-    moveToLevelHandler(ZCL_MOVE_TO_LEVEL_COMMAND_ID,
+    moveToLevelHandler(endpoint,
+                       ZCL_MOVE_TO_LEVEL_COMMAND_ID,
                        minimumLevelAllowedForTheDevice,
                        currentOnOffTransitionTime,
                        0xFF,
-- 
2.47.1.windows.1

